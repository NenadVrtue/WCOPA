---
import Container from "@globals/Container.astro";
import { Image } from "astro:assets";
import patternImage from "@assets/pattern.svg";
import { urlForImage } from "@sanity/lib/urlForImage";
import PortableText from "@components/atoms/PortableText.astro";
import ButtonLink from "@components/ui/ButtonLink.astro";

const { section } = Astro.props;
const {
  variation,
  tagline,
  title,
  subtitle,
  list,
  layout,
  pattern,
  image,
  ctaText,
  ctaLink,
} = section;
console.log(section);
---

<section
  class:list={[
    "pt-24 pb-28 relative overflow-hidden",
    variation === "white" && "bg-white text-dark-1",
    variation === "offwhite" && "bg-offwhite text-dark-1",
    variation === "lavander" && "bg-lavander text-dark-1",
    variation === "gradient" &&
      "bg-gradient-to-b from-white from-[28%] to-lavander to-[100%] text-dark-1",
    variation === "dark" && "bg-dark-2 text-white",
  ]}
>
  <Image
    src={patternImage}
    alt=""
    class:list={[
      "absolute top-0 left-0 w-full h-full object-cover object-center z-0",
      pattern && "block",
      !pattern && "hidden",
      variation === "gradien" && "opacity-80 ",
      variation === "dark" && "opacity-50 invert",
    ]}
  />
  <Container classes="relative z-10">
    <div
      class:list={[
        "flex flex-col justify-center items-center gap-8",
        layout === "imageText" && "md:flex-row",
        layout === "textImage" && " md:flex-row-reverse",
      ]}
    >
      <div class="md:w-1/2 flex justify-center">
        {
          image && (
            <Image src={urlForImage(image).url()} inferSize alt={title} />
          )
        }
      </div>
      <div class="md:w-1/2">
        <span>{tagline}</span>
        <h2><PortableText portableText={title} /></h2>

        <PortableText portableText={subtitle} />
        <div class="[&>ul]:list-outside pl-7 [&>ul]:list-image-star">
          <PortableText portableText={list} />
        </div>
        {
          ctaText && (
            <div class="text-sm mb-6">
              <PortableText portableText={ctaText} />
            </div>
          )
        }
        {
          ctaLink && (
            <ButtonLink
              buttonLink={ctaLink}
              variation={
                variation === "light" ? "primary-light-indigo" : "primary-dark"
              }
            />
          )
        }
      </div>
    </div>
  </Container>
</section>
