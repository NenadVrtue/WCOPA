---
import PortableText from "@/components/atoms/PortableText.astro";
import PortableTextTitle from "@/components/atoms/PortableTextTitle.astro";
import Container from "@/components/global/Container.astro";
import ButtonLink from "@/components/ui/ButtonLink.astro";
import { urlForImage } from "@/sanity/lib/urlForImage";
import { Image } from "astro:assets";
import patternImage from "@assets/pattern.svg";
const { section } = Astro.props;
const {
  title,
  tagline,
  description,
  variation,
  layout,
  ctaText,
  ctaLinks,
  image,
} = section;

const imageUrl = urlForImage(image).url() || null;
---

<section
  class:list={[
    "py-14 lg:py-24",
    variation === "white" && "bg-white",
    variation === "offwhite" && "bg-offwhite",
    variation === "lavander" && "bg-lavander",
    variation === "gradient" &&
      "bg-linear-to-b from-white from-28% to-lavander to-100% text-dark-1",
    variation === "dark" && "bg-dark-2 ",
    variation === "pattern" && "bg-white relative",
  ]}
>
  <Image
    src={patternImage}
    alt=""
    class:list={[
      "",
      variation !== "pattern" && "hidden",
      variation === "pattern" &&
        "absolute top-0 left-0 w-full h-full object-cover object-center z-0",
    ]}
  />
  <Container>
    <div
      class:list={[
        "rounded-sm px-2 py-2 lg:px-10 lg:py-10 xl:px-16 xl:py-16 flex gap-6 lg:gap-10 ",
        {
          "bg-lavander": ["white", "gradient", "pattern"].includes(variation),
          "bg-white": ["offwhite", "lavander", "dark"].includes(variation),
        },
        layout === "image-text" &&
          "flex-col justify-center md:flex-row-reverse",
        layout === "text-image" && "flex-col-reverse items-center md:flex-row",
        layout === "centered" &&
          "flex-col justify-center items-center text-center ",
        variation === "pattern" && "relative z-10",
      ]}
    >
      <div
        class:list={[
          "",
          layout === "centered" && "max-w-[800px]",
          layout === "title-text" && "flex flex-col md:flex-row",
        ]}
      >
        <div class:list={["", layout === "title-text" && "md:w-1/2"]}>
          <span class="uppercase font-medium text-indigo mb-1">{tagline}</span>
          <h2 class:list={["mb-4 [&>strong]:font-bold [&>strong]:text-indigo"]}>
            <PortableTextTitle portableText={title} />
          </h2>
        </div>

        <div class:list={["", layout === "title-text" && "md:w-1/2"]}>
          <div
            class:list={[
              "prose-lg  prose-p:mb-3 prose-p:mt-0 prose-p:leading-6 mb-8",
            ]}
          >
            <PortableText portableText={description} />
          </div>

          <div class="text-display-md font-display font-bold text-indigo mb-6">
            <PortableTextTitle portableText={ctaText} />
          </div>
          {
            ctaLinks && (
              <div
                class:list={[
                  "flex flex-wrap gap-6",
                  layout === "centered" && "justify-center",
                ]}
              >
                {" "}
                {ctaLinks.map((button) => {
                  return (
                    <ButtonLink buttonLink={button} variation="primary-dark" />
                  );
                })}
              </div>
            )
          }
        </div>
      </div>

      <div
        class:list={[
          " w-full h-full max-w-[500px] rounded-xs overflow-clip",
          layout === "centered" && "hidden",
          layout === "title-text" && "hidden",
        ]}
      >
        {
          image && imageUrl && (
            <Image
              src={imageUrl}
              alt=""
              inferSize
              class="w-full h-full object-cover"
            />
          )
        }
      </div>
    </div>
  </Container>
</section>
