---
/**
 * This `mark` component customizes the rendering of Portable Text marks.
 * It conditionally renders different components based on the `markType`
 * and provides a fallback to the default `astro-portabletext` Mark component.
 *
 * Usage:
 *   <PortableText value={portableTextPayload} components={{ mark: Mark }} />
 */
// @ts-nocheck
import type { MarkProps } from "astro-portabletext/types";
import { usePortableText } from "astro-portabletext";
import CalendlyDialog from "./CalendlyDialog.jsx";

export type Props = MarkProps<never>; // Use `never` for type parameter if the mark doesn't carry additional data

const props = Astro.props;
const { value, text } = props;
const markType = props.markType || (props.node && props.node.markType);

// Only render CalendlyDialog if this is a calendlyPopUp mark
const isCalendlyMark = markType === "calendlyPopUp";
---

{
    isCalendlyMark ? (
        <CalendlyDialog
            buttonText={value?.buttonText || "Schedule a Meeting"}
            client:load
        >
            <slot />
        </CalendlyDialog>
    ) : (
        <span>
            <slot />
        </span>
    )
}
